/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.foam-extend.org         |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
}

divSchemes
{
    default         none;
    div(jacobianRho,rho) Gauss linearUpwind default;
    div(jacobianRhoU,rhoU) Gauss upwind;
    div(jacobianRhoE,rhoE) Gauss upwind;
    div(jacobianRhoUv,rhoU) Gauss upwind;
    div(jacobianRhoEv,rhoE) Gauss upwind;
    
    div(jacobianRhoN2,rhoN2) Gauss upwind;
    div(jacobianRhoN,rhoN) Gauss upwind;
    div(jacobianRhoO2,rhoO2) Gauss upwind;
    div(jacobianRhoNO,rhoNO) Gauss upwind;
    div(jacobianRhoO,rhoO) Gauss upwind;
    
   /* div((interpolate(U)&S),rhoN2) Gauss upwind;
    div((interpolate(U)&S),rhoNO) Gauss upwind;
    div((interpolate(U)&S),rhoN) Gauss upwind;
    div((interpolate(U)&S),rhoO) Gauss upwind;
    div((interpolate(U)&S),rhoO2) Gauss upwind;*/



}

laplacianSchemes
{
  default         Gauss linear orthogonal;
}

interpolationSchemes
{
	default		linear;
}

snGradSchemes
{
    default         limited 1;
}


// ************************************************************************* //
